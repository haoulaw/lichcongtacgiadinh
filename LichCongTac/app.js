// --- TH√îNG TIN C·∫¶N THAY ƒê·ªîI ---
// Admin s·∫Ω t·∫°o Gist n√†y v√† d√°n ID v√†o ƒë√¢y
const GIST_ID = 'c2922af4a12bdbf22a75d48add7101ff'; 
// --- K·∫æT TH√öC PH·∫¶N THAY ƒê·ªîI ---

document.addEventListener('DOMContentLoaded', function() {
    fetchSchedule();

    const searchInput = document.getElementById('searchInput');
    searchInput.addEventListener('keyup', filterTable);

    const printButton = document.getElementById('printButton');
    printButton.addEventListener('click', () => window.print());
});

function fetchSchedule() {
    const scheduleTableBody = document.querySelector('#scheduleTable tbody');
    scheduleTableBody.innerHTML = '<tr><td colspan="7">ƒêang t·∫£i d·ªØ li·ªáu...</td></tr>';

    // S·ª≠ d·ª•ng cache-busting ƒë·ªÉ lu√¥n l·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t
    const url = `https://api.github.com/gists/${GIST_ID}?t=${new Date().getTime()}`;

    fetch(url)
        .then(response => response.json())
        .then(data => {
            const fileContent = data.files['schedule.json']?.content;
            if (fileContent) {
                const scheduleData = JSON.parse(fileContent);
                renderSchedule(scheduleData);
            } else {
                throw new Error("Kh√¥ng t√¨m th·∫•y file 'schedule.json' trong Gist.");
            }
        })
        .catch(error => {
            console.error('L·ªói khi t·∫£i l·ªãch:', error);
            scheduleTableBody.innerHTML = '<tr><td colspan="7" class="error-cell">Kh√¥ng th·ªÉ t·∫£i l·ªãch c√¥ng t√°c. Vui l√≤ng ki·ªÉm tra l·∫°i GIST_ID.</td></tr>';
        });
}

function renderSchedule(data) {
    document.getElementById('tuanSo').textContent = `Tu·∫ßn ${data.tuanSo}`;
    const updateDate = new Date(data.ngayCapNhat);
    document.getElementById('ngayCapNhat').textContent = updateDate.toLocaleString('vi-VN');
    const scheduleTableBody = document.querySelector('#scheduleTable tbody');
    scheduleTableBody.innerHTML = '';

    // C·∫≠p nh·∫≠t colspan cho c√°c th√¥ng b√°o
    const colspanValue = 8; 

    if (!data.lichCongTac || data.lichCongTac.length === 0) {
        scheduleTableBody.innerHTML = `<tr><td colspan="${colspanValue}">Kh√¥ng c√≥ l·ªãch c√¥ng t√°c trong tu·∫ßn.</td></tr>`;
        return;
    }
    
    data.lichCongTac.forEach(item => {
        const row = document.createElement('tr');
        
        // T·∫°o link L·ªãch .ics
        const icsLink = generateIcsLink(item);

        // --- B·∫ÆT ƒê·∫¶U PH·∫¶N T·∫†O LINK ZALO ---
        // 1. T·∫°o n·ªôi dung chia s·∫ª
        const zaloMessage = `L·ªãch c√¥ng t√°c - ${item.ngay}:\n- N·ªôi dung: ${item.noiDung}\n- ƒê·ªãa ƒëi·ªÉm: ${item.diaDiem}\n- Tham gia: ${item.thamGia}`;
        
        // 2. M√£ h√≥a n·ªôi dung ƒë·ªÉ ch√®n v√†o URL
        const encodedZaloMessage = encodeURIComponent(zaloMessage);
        
        // 3. T·∫°o link chia s·∫ª Zalo ho√†n ch·ªânh
        const zaloShareLink = `https://zalo.me/share/dpa/dpa_open_sharebox_from_web?d=${encodedZaloMessage}`;
        // --- K·∫æT TH√öC PH·∫¶N T·∫†O LINK ZALO ---

        // Th√™m c√°c c·ªôt v√†o h√†ng, bao g·ªìm c·∫£ n√∫t Zalo m·ªõi
        row.innerHTML = `
            <td data-label="Ng√†y">${item.ngay}</td>
            <td data-label="Bu·ªïi">${item.buoi}</td>
            <td data-label="N·ªôi dung">${item.noiDung}</td>
            <td data-label="ƒê·ªãa ƒëi·ªÉm">${item.diaDiem}</td>
            <td data-label="Tham gia">${item.thamGia}</td>
            <td data-label="Ghi ch√∫">${item.ghiChu}</td>
            <td data-label="Th√™m l·ªãch" class="no-print">
                <a href="${icsLink}" target="_blank" class="calendar-button" title="Th√™m v√†o l·ªãch c√° nh√¢n">üìÖ</a>
            </td>
            <td data-label="Chia s·∫ª" class="no-print">
                <a href="${zaloShareLink}" target="_blank" class="zalo-button" title="Chia s·∫ª qua Zalo">
                    <img src="https://brand.zalo.me/favicon.png" alt="Zalo" style="width: 24px; vertical-align: middle;">
                </a>
            </td>
        `;
        scheduleTableBody.appendChild(row);
    });

    highlightCurrentDay();
}

function filterTable() {
    const filter = document.getElementById('searchInput').value.toUpperCase();
    const rows = document.querySelectorAll('#scheduleTable tbody tr');
    rows.forEach(row => {
        const text = row.textContent.toUpperCase();
        row.style.display = text.includes(filter) ? '' : 'none';
    });
}

function highlightCurrentDay() {
    const weekdays = ["Ch·ªß Nh·∫≠t", "Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y"];
    const today = weekdays[new Date().getDay()];
    const rows = document.querySelectorAll('#scheduleTable tbody tr');
    rows.forEach(row => {
        const dayCell = row.querySelector('td:first-child');
        if (dayCell && dayCell.textContent.includes(today)) {
            row.classList.add('current-day');
        }
    });
}

function generateIcsLink(item) {
    // Gi·∫£ ƒë·ªãnh ng√†y b·∫Øt ƒë·∫ßu c·ªßa tu·∫ßn (c·∫ßn ƒëi·ªÅu ch·ªânh logic n√†y n·∫øu mu·ªën ch√≠nh x√°c tuy·ªát ƒë·ªëi)
    // ƒê√¢y l√† m·ªôt c√°ch ƒë∆°n gi·∫£n h√≥a, gi·∫£ s·ª≠ s·ª± ki·ªán di·ªÖn ra trong tu·∫ßn hi·ªán t·∫°i ho·∫∑c t∆∞∆°ng lai g·∫ßn.
    // ƒê·ªÉ ch√≠nh x√°c, c·∫ßn ph√¢n t√≠ch chu·ªói ng√†y (vd: "Th·ª© Hai (07/07)")
    const suKien = {
        tieuDe: item.noiDung,
        diaDiem: item.diaDiem,
        moTa: `Tham gia: ${item.thamGia}\nGhi ch√∫: ${item.ghiChu}`
    };

    // ƒê·ªãnh d·∫°ng th√¥ s∆° cho ng√†y b·∫Øt ƒë·∫ßu/k·∫øt th√∫c (c·∫ßn logic ph·ª©c t·∫°p h∆°n ƒë·ªÉ ch√≠nh x√°c)
    // V√≠ d·ª•: L·∫•y ng√†y hi·ªán t·∫°i v√† ƒë·∫∑t gi·ªù cho s√°ng/chi·ªÅu
    const now = new Date();
    const year = now.getFullYear();
    const month = (now.getMonth() + 1).toString().padStart(2, '0');
    const day = now.getDate().toString().padStart(2, '0');
    
    let startTime = item.buoi.toLowerCase() === 's√°ng' ? '080000' : '133000';
    let endTime = item.buoi.toLowerCase() === 's√°ng' ? '120000' : '170000';
    
    // C·∫•u tr√∫c file .ics
    const icsContent = [
        'BEGIN:VCALENDAR',
        'VERSION:2.0',
        'BEGIN:VEVENT',
        `URL:${document.location.href}`,
        `DTSTART;VALUE=DATE-TIME:${year}${month}${day}T${startTime}`,
        `DTEND;VALUE=DATE-TIME:${year}${month}${day}T${endTime}`,
        `SUMMARY:${suKien.tieuDe}`,
        `DESCRIPTION:${suKien.moTa}`,
        `LOCATION:${suKien.diaDiem}`,
        'END:VEVENT',
        'END:VCALENDAR'
    ].join('\n');

    return `data:text/calendar;charset=utf-8,${encodeURIComponent(icsContent)}`;
}